{
  "name": "TypeAnalyzer",
  "signature_class_def": "class TypeAnalyzer(dspy.Signature):\r\n    \"\"\"Generate logical linking statements between MeTTa types.\r\n    \r\n    Analyzes new types and similar existing types to generate valid MeTTa statements\r\n    that express relationships between them using the following operator:\r\n     - Implication (Implication $premise $conclusion $stv)\r\n     - Equivalence (Equivalence $premise $conclusion $stv)\r\n     - And (And $premise1 $premise2 $premise3 ...)\r\n     - Or (Or $premise1 $premise2 $premise3 ...)\r\n     - Not (Not $premise)\r\n\r\n    The Simple Truth Value (STV $strength $confidence) is a measure of the probability of a fact.\r\n    The strength is the probability of the fact being true.\r\n    The confidence is the probability that the strength is correct. (should never be 1)\r\n\r\n    A Statement has the following Structure:\r\n    (: NameOfProofStatement Type)\r\n    Your task is to provide an appropriate name and the Type\r\n    For example the relation between apple and fruit is:\r\n    (: AppleIsFruit (Implication (Apple $x) (Fruit $x) (STV 1 0.9)))\r\n\r\n    Make sure that:\r\n    - The conclusion has no unbound variables\r\n     - Meaning if a variable appears in the conclusion it must exist in the premises\r\n      -  CORRECT (: CompletionToFinishes (Implication (Completes $student_obj $course_obj) (Finishes $student_obj $course_obj) (STV 1 0.9)))\r\n      -  INCORRECT (: CompletionToDegree (Implication (Completes $student_obj $course_obj) (HasDegree $student_obj $degree_obj) (STV 1 0.9)))\r\n       - The $degree_obj variable is unbound as it does not exist in the premises\r\n\r\n    - Try to come up with counter examples before you submit your answer\r\n\r\n    - Only use the types provided do not invent new ones\r\n\r\n    - If something is only possible but not always true make sure that's reflected in the Truth Value\r\n    - If the $strength or $confidence is below 10% then don't create the relationship\r\n    \"\"\"\r\n    \r\n    new_types: list[str] = dspy.InputField(desc=\"List of new type definitions in MeTTa syntax\")\r\n    similar_types: list[str] = dspy.InputField(desc=\"List of existing similar type definitions\")\r\n    statements: list[str] = dspy.OutputField(desc=\"Generated MeTTa statements expressing relationships between types\")",
  "description": "Given a list of new and similar Types generate statements linking them where possible.",
  "input_fields": [
    "new_types",
    "similar_types"
  ],
  "output_fields": [
    "statements"
  ],
  "field_processors": {
    "statements": "clean_pln_list"
  }
}
