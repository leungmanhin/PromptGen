[
  {
    "new_types": [
      "(: Apple (-> (: $apple Object) Type))"
    ],
    "similar_types": [
      "(: Fruit (-> (: $fruit Object) Type))",
      "(: Color (-> (: $color Object) Type))"
    ],
    "statements": [
      "(: AppleIsFruit (WithTV (Implication (Apple $apple_obj) (Fruit $apple_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: ToLeave (-> (: $person Object) (: $location Object) Type))"
    ],
    "similar_types": [
      "(: ToStay (-> (: $person Object) (: $location Object) Type))",
      "(: ToEat (-> (: $person Object) (: $food Object) Type))"
    ],
    "statements": [
      "(: ToLeaveToNotToStay (WithTV (Equivalence (ToLeave $person_obj $location_obj) (Not (ToStay $person_obj $location_obj))) (STV 1 0.9)))",
      "(: ToStayToNotToLeave (WithTV (Equivalence (ToStay $person_obj $location_obj) (Not (ToLeave $person_obj $location_obj))) (STV 1 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: Temperature (-> (: $t Object) Type))"
    ],
    "similar_types": [
      "(: Pressure (-> (: $p Object) Type))",
      "(: Distance (-> (: $d Object) Type))"
    ],
    "statements": []
  },
  {
    "new_types": [
      "(: Boy (-> (: $boy Object) Type))"
    ],
    "similar_types": [
      "(: Male (-> (: $male Object) Type))",
      "(: Person (-> (: $person Object) Type))"
    ],
    "statements": [
      "(: BoyIsMale (WithTV (Implication (Boy $boy_obj) (Male $boy_obj)) (STV 0.9 0.9)))",
      "(: MaleIsBoy (WithTV (Implication (Male $male_obj) (Boy $male_obj)) (STV 0.25 0.8)))",
      "(: BoyIsPerson (WithTV (Implication (Boy $boy_obj) (Person $boy_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: HasLocation (-> (: $entity Object) (: $location Object) Type))"
    ],
    "similar_types": [
      "(: IsAt (-> (: $thing Object) (: $place Object) Type))",
      "(: HasColor (-> (: $obj Object) (: $color Object) Type))"
    ],
    "statements": [
      "(: HasLocationToIsAt (WithTV (Equivalence (HasLocation $entity_obj $location_obj) (IsAt $entity_obj $location_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: Vehicle (-> (: $v Object) Type))",
      "(: Car (-> (: $c Object) Type))"
    ],
    "similar_types": [
      "(: Bicycle (-> (: $b Object) Type))",
      "(: Book (-> (: $bk Object) Type))",
      "(: Furniture (-> (: $f Object) Type))"
    ],
    "statements": [
      "(: CarIsVehicle (WithTV (Implication (Car $c) (Vehicle $c)) (STV 0.95 0.9)))",
      "(: VehicleCanBeCar (WithTV (Implication (Vehicle $v) (Car $v)) (STV 0.2 0.8)))",
      "(: BicycleIsVehicle (WithTV (Implication (Bicycle $b) (Vehicle $b)) (STV 0.95 0.9)))",
      "(: VehicleCanBeBicycle (WithTV (Implication (Vehicle $v) (Bicycle $v)) (STV 0.15 0.8)))"
    ]
  },
  {
    "new_types": [
      "(: Shape (-> (: $s Object) Type))",
      "(: Rectangle (-> (: $r Object) Type))",
      "(: Square (-> (: $sq Object) Type))"
    ],
    "similar_types": [
      "(: Circle (-> (: $c Object) Type))",
      "(: Weight (-> (: $w Object) Type))",
      "(: Volume (-> (: $v Object) Type))"
    ],
    "statements": [
      "(: RectangleIsShape (WithTV (Implication (Rectangle $rect_obj) (Shape $rect_obj)) (STV 0.9 0.9)))",
      "(: SquareIsShape (WithTV (Implication (Square $sq_obj) (Shape $sq_obj)) (STV 0.9 0.9)))",
      "(: SquareIsRectangle (WithTV (Implication (Square $sq_obj) (Rectangle $sq_obj)) (STV 0.9 0.9)))",
      "(: CircleIsShape (WithTV (Implication (Circle $circle_obj) (Shape $circle_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: HasSkill (-> (: $person Object) (: $skill Object) Type))",
      "(: Profession (-> (: $p Object) Type))",
      "(: RequiresSkill (-> (: $prof Object) (: $skill Object) Type))"
    ],
    "similar_types": [
      "(: WorksAs (-> (: $person Object) (: $prof Object) Type))",
      "(: Hobby (-> (: $h Object) Type))",
      "(: Language (-> (: $l Object) Type))"
    ],
    "statements": [
      "(: ProfessionRequiresSkillImpliesHasSkill (WithTV (Implication (And (WorksAs $person_obj $prof_obj) (RequiresSkill $prof_obj $skill_obj)) (HasSkill $person_obj $skill_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: TimePoint (-> (: $t Object) Type))",
      "(: Before (-> (: $t1 Object) (: $t2 Object) Type))",
      "(: After (-> (: $t1 Object) (: $t2 Object) Type))"
    ],
    "similar_types": [
      "(: Duration (-> (: $d Object) Type))",
      "(: Simultaneous (-> (: $t1 Object) (: $t2 Object) Type))"
    ],
    "statements": [
      "(: BeforeNotAfter (WithTV (Equivalence (Before $t1 $t2) (Not (After $t1 $t2))) (STV 1 0.9)))",
      "(: AfterNotBefore (WithTV (Equivalence (After $t1 $t2) (Not (Before $t1 $t2))) (STV 1 0.9)))",
      "(: BeforeImpliesTimePoints (WithTV (Implication (Before $t1 $t2) (And (TimePoint $t1) (TimePoint $t2))) (STV 0.95 0.9)))",
      "(: AfterImpliesTimePoints (WithTV (Implication (After $t1 $t2) (And (TimePoint $t1) (TimePoint $t2))) (STV 0.95 0.9)))",
      "(: BeforeAfterInverse (WithTV (Equivalence (Before $t1 $t2) (After $t2 $t1)) (STV 0.99 0.95)))",
      "(: BeforeNotSimultaneous (WithTV (Implication (Before $t1 $t2) (Not (Simultaneous $t1 $t2))) (STV 0.99 0.95)))",
      "(: AfterNotSimultaneous (WithTV (Implication (After $t1 $t2) (Not (Simultaneous $t1 $t2))) (STV 0.99 0.95)))",
      "(: SimultaneousNotBefore (WithTV (Implication (Simultaneous $t1 $t2) (Not (Before $t1 $t2))) (STV 0.99 0.95)))",
      "(: SimultaneousNotAfter (Implication (Simultaneous $t1 $t2) (Not (After $t1 $t2)) (STV 0.99 0.95)))"
    ]
  },
  {
    "new_types": [
      "(: Animal (-> (: $a Object) Type))",
      "(: Mammal (-> (: $m Object) Type))",
      "(: Carnivore (-> (: $c Object) Type))",
      "(: Herbivore (-> (: $h Object) Type))"
    ],
    "similar_types": [
      "(: Vertebrate (-> (: $v Object) Type))",
      "(: EatsPlants (-> (: $animal Object) Type))",
      "(: EatsMeat (-> (: $animal Object) Type))"
    ],
    "statements": [
      "(: MammalIsAnimal (WithTV (Implication (Mammal $m) (Animal $m)) (STV 0.99 0.95)))",
      "(: MammalIsVertebrate (WithTV (Implication (Mammal $m) (Vertebrate $m)) (STV 0.99 0.95)))",
      "(: AnimalMayBeVertebrate (WithTV (Implication (Animal $a) (Vertebrate $a)) (STV 0.05 0.9)))",
      "(: CarnivoreEatsMeat (WithTV (Implication (Carnivore $c) (EatsMeat $c)) (STV 0.99 0.95)))",
      "(: HerbivoreEatsPlants (WithTV (Implication (Herbivore $h) (EatsPlants $h)) (STV 0.99 0.95)))",
      "(: CarnivoreNotHerbivore (WithTV (Equivalence (Carnivore $a) (Not (Herbivore $a))) (STV 0.9 0.85)))",
      "(: HerbivoreNotCarnivore (WithTV (Equivalence (Herbivore $a) (Not (Carnivore $a))) (STV 0.9 0.85)))",
      "(: CarnivoreIsAnimal (WithTV (Implication (Carnivore $c) (Animal $c)) (STV 0.99 0.95)))",
      "(: HerbivoreIsAnimal (WithTV (Implication (Herbivore $h) (Animal $h)) (STV 0.99 0.95)))"
    ]
  },
  {
    "new_types": [
      "(: Raining (-> (: $r Object) Type))"
    ],
    "similar_types": [
      "(: Sunny (-> (: $s Object) Type))",
      "(: Cloudy (-> (: $c Object) Type))",
      "(: WeatherCondition (-> (: $w Object) Type))",
      "(: Temperature (-> (: $t Object) Type))",
      "(: Humidity (-> (: $h Object) Type))"
    ],
    "statements": [
      "(: RainingIsNotSunny (WithTV (Equivalence (Raining $weather_obj) (Not (Sunny $weather_obj))) (STV 0.9 0.9)))",
      "(: SunnyIsNotRaining (WithTV (Equivalence (Sunny $weather_obj) (Not (Raining $weather_obj))) (STV 0.9 0.9)))",
      "(: RainingIsWeather (WithTV (Implication (Raining $weather_obj) (WeatherCondition $weather_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: Studies (-> (: $student Object) (: $subject Object) Type))",
      "(: Completes (-> (: $student Object) (: $course Object) Type))",
      "(: HasDegree (-> (: $person Object) (: $degree Object) Type))",
      "(: QualifiedFor (-> (: $person Object) (: $position Object) Type))",
      "(: RequiresDegree (-> (: $position Object) (: $degree Object) Type))"
    ],
    "similar_types": [
      "(: Enrolled (-> (: $student Object) (: $course Object) Type))",
      "(: Teaches (-> (: $teacher Object) (: $subject Object) Type))"
    ],
    "statements": [
      "(: DegreeQualifiesPerson (WithTV (Implication (And (HasDegree $person_obj $degree_obj) (RequiresDegree $position_obj $degree_obj)) (QualifiedFor $person_obj $position_obj)) (STV 0.9 0.9)))",
      "(: EnrollsToStudies (WithTV (Implication (Enrolled $student_obj $course_obj) (Studies $student_obj $course_obj)) (STV 0.9 0.9)))",
      "(: CompletesToEnrolledBefore (WithTV (Implication (Context (Completes $student_obj $course_obj) $ctx1) (And (Before $ctx1 $ctx2) (Context (Not (Enrolled $student_obj $course_obj)) $ctx2))) (STV 0.9 0.9)))",
      "(: CompletesToNotEnrolled (WithTV (Implication (Completes $student_obj $course_obj) (Not (Enrolls $student_obj $course_obj))) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: Produces (-> (: $manufacturer Object) (: $product Object) Type))",
      "(: Supplies (-> (: $supplier Object) (: $material Object) (: $manufacturer Object) Type))",
      "(: Uses (-> (: $product Object) (: $material Object) Type))",
      "(: RequiresMaterial (-> (: $manufacturer Object) (: $material Object) Type))"
    ],
    "similar_types": [
      "(: Stores (-> (: $warehouse Object) (: $item Object) Type))",
      "(: Transports (-> (: $carrier Object) (: $cargo Object) Type))"
    ],
    "statements": [
      "(: ProductionRequiresMaterials (WithTV (Implication (And (Produces $manufacturer $product) (Uses $product $material)) (RequiresMaterial $manufacturer $material)) (STV 0.95 0.9)))",
      "(: SupplierFulfillsRequirement (WithTV (Implication (Supplies $supplier $material $manufacturer) (RequiresMaterial $manufacturer $material)) (STV 0.8 0.85)))"
    ]
  },
  {
    "new_types": [
      "(: ParentOf (-> (: $parent Object) (: $child Object) Type))",
      "(: SiblingOf (-> (: $sib1 Object) (: $sib2 Object) Type))",
      "(: GrandparentOf (-> (: $gparent Object) (: $gchild Object) Type))"
    ],
    "similar_types": [
      "(: Related (-> (: $person1 Object) (: $person2 Object) Type))",
      "(: SameGeneration (-> (: $p1 Object) (: $p2 Object) Type))"
    ],
    "statements": [
      "(: ParentOfToRelated (WithTV (Implication (ParentOf $parent_obj $child_obj) (Related $parent_obj $child_obj)) (STV 1 0.9)))",
      "(: SiblingOfToRelated (WithTV (Implication (SiblingOf $sib1_obj $sib2_obj) (Related $sib1_obj $sib2_obj)) (STV 1 0.9)))",
      "(: GrandparentOfToRelated (WithTV (Implication (GrandparentOf $gparent_obj $gchild_obj) (Related $gparent_obj $gchild_obj)) (STV 1 0.9)))",
      "(: SiblingsAreSymmetric (WithTV (Implication (SiblingOf $sib1_obj $sib2_obj) (SiblingOf $sib2_obj $sib1_obj)) (STV 1 0.9)))",
      "(: SiblingsAreSameGeneration (WithTV (Implication (SiblingOf $sib1_obj $sib2_obj) (SameGeneration $sib1_obj $sib2_obj)) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: Chemical (-> (: $c Object) Type))",
      "(: ReactsWith (-> (: $reactant1 Object) (: $reactant2 Object) (: $product Object) Type))",
      "(: Catalyst (-> (: $catalyst Object) (: $reaction Object) Type))",
      "(: Inhibitor (-> (: $inhibitor Object) (: $reaction Object) Type))"
    ],
    "similar_types": [
      "(: Element (-> (: $e Object) Type))",
      "(: Compound (-> (: $c Object) Type))"
    ],
    "statements": [
      "(: CompoundIsChemical (WithTV (Implication (Compound $compound_obj) (Chemical $compound_obj)) (STV 1 0.9)))",
      "(: ElementIsChemical (WithTV (Implication (Element $element_obj) (Chemical $element_obj)) (STV 1 0.9)))",
      "(: ReactantsAreChemical (WithTV (Implication (ReactsWith $r1 $r2 $p) (Chemical $r1)) (STV 1 0.9)))",
      "(: ReactantsAreChemical2 (WithTV (Implication (ReactsWith $r1 $r2 $p) (Chemical $r2)) (STV 1 0.9)))",
      "(: ReactionProducesChemical (WithTV (Implication (ReactsWith $r1_obj $r2_obj $p_obj) (Chemical $p_obj)) (STV 1 0.9)))",
      "(: CatalystIsChemical (WithTV (Implication (Catalyst $cat_obj $reaction_obj) (Chemical $cat_obj)) (STV 1 0.9)))",
      "(: InhibitorIsChemical (WithTV (Implication (Inhibitor $inhibit_obj $reaction_obj) (Chemical $inhibit_obj)) (STV 1 0.9)))",
      "(: CatalystIsNotInhibitor (WithTV (Equivalence (Catalyst $cat_obj $reaction_obj) (Not (Inhibitor $cat_obj $reaction_obj))) (STV 0.9 0.9)))",
      "(: InhibitorIsNotCatalyst (WithTV (Equivalence (Inhibitor $inhibit_obj $reaction_obj) (Not (Catalyst $inhibit_obj $reaction_obj))) (STV 0.9 0.9)))"
    ]
  },
  {
    "new_types": [
      "(: DependsOn (-> (: $pkg Object) (: $dep Object) Type))",
      "(: VersionRange (-> (: $pkg Object) (: $min Object) (: $max Object) Type))",
      "(: Incompatible (-> (: $pkg1 Object) (: $pkg2 Object) Type))"
    ],
    "similar_types": [
      "(: Installed (-> (: $pkg Object) Type))",
      "(: Available (-> (: $pkg Object) Type))"
    ],
    "statements": [
      "(: DependencyRequiresInstallation (WithTV (Implication (And (DependsOn $pkg $dep) (Installed $pkg)) (Installed $dep)) (STV 0.95 0.9)))",
      "(: IncompatibleCannotBeInstalledTogether (WithTV (Implication (Incompatible $pkg1 $pkg2) (Not (And (Installed $pkg1) (Installed $pkg2)))) (STV 0.99 0.95)))",
      "(: InstalledMustBeAvailable (WithTV (Implication (Installed $pkg) (Available $pkg)) (STV 0.99 0.95)))",
      "(: DependencyOnUnavailableBlocksInstallation (WithTV (Implication (And (DependsOn $pkg $dep) (Not (Available $dep))) (Not (Installed $pkg))) (STV 0.95 0.9)))"
    ]
  },
  {
    "new_types": "(: Old (-> (: $old Object) Type))\r\n",
    "similar_types": "(: Young (-> (: $young Object) Type))",
    "statements": "(: YoungBeforeOld (WithTV (Implication (Context (Young $x) $ctx) (And (Before $ctx $after) (Context (Old $x) $after))) (STV 0.99 0.9)))\r\n(: OldImpliesNotYoung (WithTV (Implication (Old $person) (Not (Young $person))) (STV 0.9 0.8)))\r\n(: YoungImpliesNotOld (WithTV (Implication (Young $person) (Not (Old $person))) (STV 0.9 0.8)))\r\n\r\n"
  },
  {
    "new_types": "(: Acute (-> (: $condition Object) Type))",
    "similar_types": "(: Chronic (-> (: $condition Object) Type))",
    "statements": "(: ChronicImpliesNotAcute (WithTV (Implication (Chronic $condition) (Not (Acute $condition))) (STV 0.95 0.9)))\r\n(: AcuteImpliesNotChronic (WithTV (Implication (Acute $condition) (Not (Chronic $condition))) (STV 0.95 0.9)))\r\n(: ChronicPersistsOverTime (WithTV (Implication (Context (Chronic $condition) $ctx1) (And (After $ctx1 $ctx2) (Context (Chronic $condition) $ctx2))) (STV 0.8 0.75)))"
  }
]