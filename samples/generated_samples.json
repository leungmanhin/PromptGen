[
  {
    "english": "Max is a Dog",
    "pln_types": "(: Dog (-> (: $dog Object) Type))\r\n(: Name (-> (: $named Object) (: $name String) Type))",
    "pln_statements": "(: dog (WithTV (Dog $a) (STV 0.0001 0.001)))\r\n(: name (WithTV (Name $a $b) (STV 0.0001 0.001)))\r\n(: max_named_max (WithTV (Name max 'Max') (STV 1.0 1.0)))\r\n(: max_dog (WithTV (Dog max) (STV 1.0 1.0)))",
    "pln_query": ""
  },
  {
    "english": "John likes Mary.",
    "pln_types": "(: Person (-> (: $person Object) Type))\r\n(: Name (-> (: $named Object) (: $name String) Type))\r\n(: Likes (-> (: $liker Object) (: $liked Object) Type))",
    "pln_statements": "(: person (WithTV (Person $a) (STV 0.0001 0.001)))\r\n(: name (WithTV (Name $a $b) (STV 0.0001 0.001)))\r\n(: likes (WithTV (Likes $a $b) (STV 0.0001 0.001)))\r\n(: john_named_john (WithTV (Name john 'John') (STV 1.0 1.0)))\r\n(: mary_named_mary (WithTV (Name mary 'Mary') (STV 1.0 1.0)))\r\n(: john_person (WithTV (Person john) (STV 1.0 1.0)))\r\n(: mary_person (WithTV (Person mary) (STV 1.0 1.0)))\r\n(: john_likes_mary (WithTV (Likes john mary) (STV 0.9 0.9)))",
    "pln_query": ""
  },
  {
    "english": "All birds can fly.",
    "pln_types": "(: Bird (-> (: $bird Object) Type))\n(: Can_fly (-> (: $flyer Object) Type))",
    "pln_statements": "(: bird (WithTV (Bird $a) (STV 0.0001 0.001)))\n(: can_fly (WithTV (Can_fly $a) (STV 0.0001 0.001)))\n(: bird_fly_rule (WithTV (Implication (Bird $x) (Can_fly $x)) (STV 0.95 0.9)))",
    "pln_query": ""
  },
  {
    "english": "The red car is not faster than the blue truck.",
    "pln_types": "(: Vehicle (-> (: $vehicle Object) Type))\r\n(: Car (-> (: $car Object) Type))\r\n(: Truck (-> (: $truck Object) Type))\r\n(: Red (-> (: $object Object) Type))\r\n(: Blue (-> (: $object Object) Type))\r\n(: Faster_than (-> (: $vehicle1 Object) (: $vehicle2 Object) Type))",
    "pln_statements": "(: vehicle (WithTV (Vehicle $a) (STV 0.0001 0.001)))\r\n(: car (WithTV (Car $a) (STV 0.0001 0.001)))\r\n(: truck (WithTV (Truck $a) (STV 0.0001 0.001)))\r\n(: red (WithTV (Red $a) (STV 0.0001 0.001)))\r\n(: blue (WithTV (Blue $a) (STV 0.0001 0.001)))\r\n(: faster_than (WithTV (Faster_than $a $b) (STV 0.0001 0.001)))\r\n(: car1_is_car (WithTV (Car car1) (STV 1.0 1.0)))\r\n(: truck1_is_truck (WithTV (Truck truck1) (STV 1.0 1.0)))\r\n(: car1_is_vehicle (WithTV (Vehicle car1) (STV 1.0 1.0)))\r\n(: truck1_is_vehicle (WithTV (Vehicle truck1) (STV 1.0 1.0)))\r\n(: car1_is_red (WithTV (Red car1) (STV 1.0 1.0)))\r\n(: truck1_is_blue (WithTV (Blue truck1) (STV 1.0 1.0)))\r\n(: not_faster (WithTV (Faster_than car1 truck1) (STV 0.0 0.9)))",
    "pln_query": ""
  },
  {
    "english": "Some students who study hard will pass the exam.",
    "pln_types": "(: Student (-> (: $person Object) Type))\n(: Studies_hard (-> (: $student Object) Type))\n(: Passes_exam (-> (: $student Object) Type))",
    "pln_statements": "(: student (WithTV (Student $a) (STV 0.0001 0.001)))\n(: studies_hard (WithTV (Studies_hard $a) (STV 0.0001 0.001)))\n(: passes_exam (WithTV (Passes_exam $a) (STV 0.0001 0.001)))\n(: conditional_rule (WithTV (Implication (And (Student $x) (Studies_hard $x)) (Passes_exam $x)) (STV 0.85 0.5)))",
    "pln_query": ""
  },
  {
    "english": "Every teacher either likes mathematics or teaches science.",
    "pln_types": "(: Person (-> (: $person Object) Type))\n(: Teacher (-> (: $teacher Object) Type))\n(: Likes_mathematics (-> (: $person Object) Type))\n(: Teaches_science (-> (: $teacher Object) Type))",
    "pln_statements": "(: person (WithTV (Person $a) (STV 0.0001 0.001)))\n(: teacher WithTV (Teacher $a) (STV 0.0001 0.001)))\n(: likes_mathematics (WithTV (Likes_mathematics $a) (STV 0.0001 0.001)))\n(: teaches_science (WithTV (Teaches_science $a) (STV 0.0001 0.001)))\n(: teacher_math_science_rule (WithTV (Implication (Teacher $x) (Or (Likes_mathematics $x) (Teaches_science $x))) (STV 0.9 0.9)))",
    "pln_query": ""
  },
  {
    "english": "A number is even if and only if it is divisible by 2.",
    "pln_types": "(: Even (-> (: $n Object) Type))\n(: Divisible_by (-> (: $n Object) (: $divisor Number) Type))",
    "pln_statements": "(: even (WithTV (Even $a) (STV 0.0001 0.001)))\n(: divisible_by (WithTV (Divisible_by $a $b) (STV 0.0001 0.001)))\n(: even_iff_div_by_2 (WithTV (Equivalence (Even $x) (Divisible_by $x 2)) (STV 1.0 1.0)))",
    "pln_query": ""
  },
  {
    "english": "All dogs chase some cat.",
    "pln_types": "(: Dog (-> (: $dog Object) Type))\n(: Cat (-> (: $cat Object) Type))\n(: Chase (-> (: $chaser Object) (: $chased Object) Type))",
    "pln_statements": "(: dog (WithTV (Dog $a) (STV 0.0001 0.001)))\n(: cat (WithTV (Cat $a) (STV 0.0001 0.001)))\n(: chase (WithTV (Chase $a $b) (STV 0.0001 0.001)))\n(: dogschasesomecat (WithTV (Implication (Dog $d) (And (Cat $c) (Chase $d $c))) (STV 0.9 0.9)))",
    "pln_query": ""
  },
  {
    "english": "If it rains tomorrow, the outdoor concert will be canceled.",
    "pln_types": "(: Rain (-> (: $day Object) Type))\r\n(: Outdoor_concert (-> (: $concert Object) Type))\r\n(: Canceled (-> (: $event Object) Type))\r\n(: Happens_on (-> (: $event Object) (: $day Object) Type))",
    "pln_statements": "(: rain (WithTV (Rain $a) (STV 0.0001 0.001)))\r\n(: outdoor_concert (WithTV (Outdoor_concert $a) (STV 0.0001 0.001)))\r\n(: canceled (WithTV (Canceled $a) (STV 0.0001 0.001)))\r\n(: happens_on (WithTV (Happens_on $a $b) (STV 0.0001 0.001)))\r\n(: concert1_is_outdoor (WithTV (Outdoor_concert concert1) (STV 1.0 1.0)))\r\n(: concert1_on_tomorrow (WithTV (Happens_on concert1 tomorrow) (STV 1.0 1.0)))\r\n(: rain_cancels_concert (WithTV (Implication (Rain tomorrow) (Canceled concert1)) (STV 0.95 0.9)))",
    "pln_query": ""
  },
  {
    "english": "The Empire State Building is more than 380 meters tall.",
    "pln_types": "(: Building (-> (: $building Object) Type))\r\n(: Name (-> (: $named Object) (: $name String) Type))\r\n(: Height (-> (: $object Object) (: $height Number) Type))\r\n(: Unit (-> (: $object Object) (: $unit String) Type))\r\n(: Greater_than (-> (: $value1 Number) (: $value2 Number) Type))",
    "pln_statements": "(: building (WithTV (Building $a) (STV 0.0001 0.001)))\r\n(: name (WithTV (Name $a $b) (STV 0.0001 0.001)))\r\n(: height (WithTV (Height $a $b) (STV 0.0001 0.001)))\r\n(: unit (WithTV (Unit $a $b) (STV 0.0001 0.001)))\r\n(: greater_than (WithTV (Greater_than $a $b) (STV 0.0001 0.001)))\r\n(: empire_state_is_building (WithTV (Building empire_state) (STV 1.0 1.0)))\r\n(: empire_state_named (WithTV (Name empire_state 'Empire State Building') (STV 1.0 1.0)))\r\n(: empire_state_height (WithTV (And (Height empire_state $h) (And (Unit $h 'Meter') (Greater_than $h 380))) (STV 1.0 1.0)))",
    "pln_query": ""
  },
  {
    "english": "Alice visits her grandmother every Sunday afternoon.",
    "pln_types": "(: Person (-> (: $person Object) Type))\r\n(: Name (-> (: $named Object) (: $name String) Type))\r\n(: Grandmother_of (-> (: $grandmother Object) (: $grandchild Object) Type))\r\n(: Visits (-> (: $visitor Object) (: $visited Object) Type))\r\n(: Sunday (-> (: $day Object) Type))\r\n(: Afternoon (-> (: $timeperiod Object) Type))",
    "pln_statements": "(: person (WithTV (Person $a) (STV 0.0001 0.001)))\r\n(: name (WithTV (Name $a $b) (STV 0.0001 0.001)))\r\n(: grandmother_of (WithTV (Grandmother_of $a $b) (STV 0.0001 0.001)))\r\n(: visits (WithTV (Visits $a $b) (STV 0.0001 0.001)))\r\n(: sunday (WithTV (Sunday $a) (STV 0.0001 0.001)))\r\n(: afternoon (WithTV (Afternoon $a) (STV 0.0001 0.001)))\r\n(: alice_named_alice (WithTV (Name alice 'Alice') (STV 1.0 1.0)))\r\n(: alice_is_person (WithTV (Person alice) (STV 1.0 1.0)))\r\n(: grandmother1_is_person (WithTV (Person grandmother1) (STV 1.0 1.0)))\r\n(: grandmother_relation (WithTV (Grandmother_of grandmother1 alice) (STV 1.0 1.0)))\r\n(: alice_visits_grandmother (WithTV (Implication (And (Sunday $x) (Afternoon $x)) (Context (Visits alice grandmother1) $x) (STV 0.95 0.9)))",
    "pln_query": ""
  },
  {
    "english": "Is a Apple a fruit?",
    "pln_types": "(: Apple (-> (: $apple Object) Type))\n(: Fruit (-> (: $fruit Object) Type))",
    "pln_statements": "",
    "pln_query": "(: $prf (WithTV (Implication (Apple $x) (Fruit $x)) $tv))"
  },
  {
    "english": "If a student studies for at least 5 hours and gets enough sleep, what is the probability they will pass the exam?",
    "pln_types": "(: Student (-> (: $student Object) Type))\n(: Studies_hours (-> (: $student Object) (: $hours Number) Type))\n(: Gets_enough_sleep (-> (: $student Object) Type))\n(: Passes_exam (-> (: $student Object) Type))\n(: Greater_than_equal (-> (: $value1 Number) (: $value2 Number) Type))",
    "pln_statements": "(: student (WithTV (Student $a) (STV 0.0001 0.001)))\n(: studies_hours (WithTV (Studies_hours $a $b) (STV 0.0001 0.001)))\n(: gets_enough_sleep (WithTV (Gets_enough_sleep $a) (STV 0.0001 0.001)))\n(: passes_exam (WithTV (Passes_exam $a) (STV 0.0001 0.001)))\n(: greater_than_equal (WithTV (Greater_than_equal $a $b) (STV 0.0001 0.001)))",
    "pln_query": "(: $query (WithTV (Implication (And (Student $x) (And (Studies_hours $x $h) (And (Greater_than_equal $h 5) (Gets_enough_sleep $x)))) (Passes_exam $x)) $tv))"
  },
  {
    "english": "If the barometric pressure drops rapidly and dark clouds form, there is an 80% chance it will rain within the next 3 hours.",
    "pln_types": "(: Dark_clouds (-> (: $darkclouds Object) Type))\r\n(: Rain (-> (: $rain Object) Type))\r\n(: Dropping_rapidly (-> (: $object Object) Type))\r\n(: Barometric_pressure (-> (: $presure Object) Type))\r\n(: Within_hours (-> (: $time1 Object) (: $time2 Object) (: $hours Number) Type))",
    "pln_statements": "(: dark_clouds (WithTV (Dark_clouds $a) (STV 0.0001 0.001)))\r\n(: rain (WithTV (Rain $a) (STV 0.0001 0.001)))\r\n(: dropping_rapidly (WithTV (Dropping_rapidly $a) (STV 0.0001 0.001)))\r\n(: barometric_pressure (WithTV (Barometric_pressure $a) (STV 0.0001 0.001)))\r\n(: within_hours (WithTV (Within_hours $a $b $c) (STV 0.0001 0.001)))\r\n(: weather_prediction (WithTV (Implication (And (Barometric_pressure $bp) (And (Context (Dropping_rapidly $bp) $time1) (Dark_clouds $time1)) (And (Rain $time2) (Within_hours $time2 $time1 3))) (STV 0.8 0.9)))",
    "pln_query": ""
  },
  {
    "english": "This ball is bright red.",
    "pln_types": "(: Ball (-> (: $ball Object) Type))\r\n(: Red (-> (: $red Object) Type))\r\n(: Bright (-> (-> (: $object Object) Type) (-> (: $object Object) Type)))",
    "pln_statements": "(: ball (WithTV (Ball $a) (STV 0.0001 0.001)))\r\n(: red(WithTV (Red $a) (STV 0.0001 0.001)))\r\n(: brigh (WithTV (Bright $a) (STV 0.01 0.01)))\r\n(: ballIsBall (WithTV (Ball bobj) (STV 1.0 0.9)))\r\n(: ballIsBrightRed (WithTV ((Bright Red) bobj) (STV 0.9 0.9)))",
    "pln_query": ""
  },
  {
    "english": "What attributes does a House have?",
    "pln_types": "(: House (-> (: $house Object) Type))",
    "pln_statements": "",
    "pln_query": "(: $prf (WithTV (And (House $house) ($attrib $house)) $tv))"
  },
  {
    "english": "What relationship do john and mark have?",
    "pln_types": "",
    "pln_statements": "",
    "pln_query": "(: $prf (WithTV (And (Name $john \"John\") (And (Name $mark \"Mark\") ($relation $john $mark))) $tv))"
  },
  {
    "english": "What properties does a Car have?",
    "pln_types": "(: Car (-> (: $car Object) Type))",
    "pln_statements": "",
    "pln_query": "(: $prf (WithTV (And (Car $car) ($property $car)) $tv))"
  },
  {
    "english": "How is this house related to me?",
    "pln_types": "",
    "pln_statements": "",
    "pln_query": "(: $prf (WithTV ($relation house self) $tv))"
  },
  {
    "english": "John beliefs that Mark is angry",
    "pln_types": "(: Person (-> (: $person Object) Type))\r\n(: Name (-> (: $named Object) (: $name String) Type))\r\n(: Angry (-> (: $person Object) Type))\r\n(: Believes (-> (: $believer Object) (: $belief Type) Type))",
    "pln_statements": "(: person (WithTV (Person $a) (STV 0.0001 0.001)))\r\n(: name (WithTV (Name $a $b) (STV 0.0001 0.001)))\r\n(: angry (WithTV (Angry $a) (STV 0.0001 0.001)))\r\n(: believes (WithTV (Believes $a $b) (STV 0.0001 0.001)))\r\n(: john_named_john (WithTV (Name john 'John') (STV 1.0 1.0)))\r\n(: mark_named_mark (WithTV (Name mark 'Mark') (STV 1.0 1.0)))\r\n(: john_person (WithTV (Person john) (STV 1.0 1.0)))\r\n(: mark_person (WithTV (Person mark) (STV 1.0 1.0)))\r\n(: john_believes_mark_angry (WithTV (Believes john (Angry mark)) (STV 0.9 0.9)))",
    "pln_query": ""
  }
]